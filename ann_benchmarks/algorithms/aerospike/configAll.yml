float:
  any:
  - base_args: ['@metric',  '@dimension']
    constructor: Aerospike
    disabled: false
    docker_tag: ann-benchmarks-aerospike
    module: ann_benchmarks.algorithms.aerospike
    name: aerospike
    run_groups:
      cosine:
        args: [
          [cosine], #Idx Type
          [{m: 8, ef_construction: 64, ef: 8},
            {m: 16, ef_construction: 128, ef: 8}, #],
            {m: 24, ef_construction: 256, ef: 8},
            {m: 32, ef_construction: 512, ef: 8}], #HnswParams for each run
          [True], #Unique Set/Index Name (optional, default True). The created Set/Index Name is based on Idx Type, Dims, M, EF_const, and EF. If false, only Idx Type
          [True] #True to Drop Idx and Re-Populate, optional default true
          #[AllOps] #Default Performs all operations (populate idx and query). Values are IdxPopulateOnly, QueryOnly, AllOps (default)
        ]
        query_args: [ #Query HnswSearchParams, e.g., [{ef: 3}], optional
          [null, #Uses default
            {ef: 10},
            {ef: 20},
            {ef: 40},            
            {ef: 80},
            {ef: 120},
            {ef: 200},
            {ef: 400},
            {ef: 600},
            {ef: 800}]  
        ]
      dot_product:
        args: [
          [dot_product], #Idx Type
          [{m: 8, ef_construction: 64, ef: 8},
            {m: 16, ef_construction: 128, ef: 8}, #],
            {m: 24, ef_construction: 256, ef: 8},
            {m: 32, ef_construction: 512, ef: 8}], #HnswParams for each run
          [True], #Unique Set/Index Name (optional, default True). The created Set/Index Name is based on Idx Type, Dims, M, EF_const, and EF. If false, only Idx Type
          [True] #True to Drop Idx and Re-Populate, optional default true
          #[AllOps] #Performs all operations (populate idx and query). Values are IdxPopulateOnly, QueryOnly, AllOps (default)
        ]      
        query_args: [ #Query HnswSearchParams, e.g., [{ef: 3}], optional
          [null, #Uses default
            {ef: 10},
            {ef: 20},
            {ef: 40},            
            {ef: 80},
            {ef: 120},
            {ef: 200},
            {ef: 400},
            {ef: 600},
            {ef: 800}]  
        ]
      manhattan:
        args: [
          [manhattan], #Idx Type
          [{m: 8, ef_construction: 64, ef: 8},
            {m: 16, ef_construction: 128, ef: 8}, #],
            {m: 24, ef_construction: 256, ef: 8},
            {m: 32, ef_construction: 512, ef: 8}], #HnswParams for each run
          [True], #Unique Set/Index Name (optional, default True). The created Set/Index Name is based on Idx Type, Dims, M, EF_const, and EF. If false, only Idx Type
          [True] #True to Drop Idx and Re-Populate, optional default true
          #[AllOps] #Performs all operations (populate idx and query). Values are IdxPopulateOnly, QueryOnly, AllOps (default)
        ]      
        query_args: [ #Query HnswSearchParams, e.g., [{ef: 3}], optional
          [null, #Uses default
            {ef: 10},
            {ef: 20},
            {ef: 40},            
            {ef: 80},
            {ef: 120},
            {ef: 200},
            {ef: 400},
            {ef: 600},
            {ef: 800}]  
        ]
      SQUARED_EUCLIDEAN:
        args: [
          [SQUARED_EUCLIDEAN], #Idx Type
          [{m: 8, ef_construction: 64, ef: 8},
            {m: 16, ef_construction: 128, ef: 8}, #],
            {m: 24, ef_construction: 256, ef: 8},
            {m: 32, ef_construction: 512, ef: 8}], #HnswParams for each run
          [True], #Unique Set/Index Name (optional, default True). The created Set/Index Name is based on Idx Type, Dims, M, EF_const, and EF. If false, only Idx Type
          [True] #True to Drop Idx and Re-Populate, optional default true
          #[AllOps] #Performs all operations (populate idx and query). Values are IdxPopulateOnly, QueryOnly, AllOps (default)
        ]      
        query_args: [ #Query HnswSearchParams, e.g., [{ef: 3}], optional
          [null, #Uses default
            {ef: 10},
            {ef: 20},
            {ef: 40},            
            {ef: 80},
            {ef: 120},
            {ef: 200},
            {ef: 400},
            {ef: 600},
            {ef: 800}]  
        ]